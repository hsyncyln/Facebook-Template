// <auto-generated />
using System;
using Facebook.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Facebook.Migrations
{
    [DbContext(typeof(FacebookContext))]
    [Migration("20200520130212_Facebookvs5")]
    partial class Facebookvs5
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Facebook.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CommentUserUserId");

                    b.Property<string>("Content");

                    b.Property<int?>("PostId");

                    b.HasKey("Id");

                    b.HasIndex("CommentUserUserId");

                    b.HasIndex("PostId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Facebook.Models.Explore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Icon")
                        .HasMaxLength(200);

                    b.Property<string>("Link")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Explores");
                });

            modelBuilder.Entity("Facebook.Models.Friend", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<int>("FriendId");

                    b.Property<int?>("FriendUserUserId");

                    b.HasKey("Id");

                    b.HasIndex("FriendUserUserId");

                    b.ToTable("Friends");
                });

            modelBuilder.Entity("Facebook.Models.Image", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageLink")
                        .HasMaxLength(50);

                    b.Property<int?>("UserId");

                    b.HasKey("ImageId");

                    b.HasIndex("UserId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Facebook.Models.Like", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CommentId");

                    b.Property<int>("LikeUserId");

                    b.Property<int?>("PostId");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("LikeUserId");

                    b.HasIndex("PostId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("Facebook.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content");

                    b.Property<int>("OtherUserId");

                    b.Property<DateTime>("SendDate");

                    b.HasKey("Id");

                    b.HasIndex("OtherUserId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Facebook.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content");

                    b.Property<string>("Picture");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Facebook.Models.ShortCut", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Icon")
                        .HasMaxLength(200);

                    b.Property<string>("Link")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ShortCuts");
                });

            modelBuilder.Entity("Facebook.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BackgroundPhotoImageId");

                    b.Property<DateTime>("BirthDate");

                    b.Property<string>("Email")
                        .HasMaxLength(30);

                    b.Property<string>("FirstName")
                        .HasMaxLength(20);

                    b.Property<string>("Gender")
                        .HasMaxLength(10);

                    b.Property<string>("LastName")
                        .HasMaxLength(20);

                    b.Property<string>("Password")
                        .HasMaxLength(30);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15);

                    b.Property<int?>("ProfilePhotoImageId");

                    b.Property<int?>("UserId1");

                    b.HasKey("UserId");

                    b.HasIndex("BackgroundPhotoImageId");

                    b.HasIndex("ProfilePhotoImageId");

                    b.HasIndex("UserId1");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Facebook.Models.Comment", b =>
                {
                    b.HasOne("Facebook.Models.User", "CommentUser")
                        .WithMany()
                        .HasForeignKey("CommentUserUserId");

                    b.HasOne("Facebook.Models.Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId");
                });

            modelBuilder.Entity("Facebook.Models.Friend", b =>
                {
                    b.HasOne("Facebook.Models.User", "FriendUser")
                        .WithMany()
                        .HasForeignKey("FriendUserUserId");
                });

            modelBuilder.Entity("Facebook.Models.Image", b =>
                {
                    b.HasOne("Facebook.Models.User")
                        .WithMany("Images")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Facebook.Models.Like", b =>
                {
                    b.HasOne("Facebook.Models.Comment")
                        .WithMany("Likes")
                        .HasForeignKey("CommentId");

                    b.HasOne("Facebook.Models.User", "LikeUser")
                        .WithMany()
                        .HasForeignKey("LikeUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Facebook.Models.Post")
                        .WithMany("Likes")
                        .HasForeignKey("PostId");
                });

            modelBuilder.Entity("Facebook.Models.Message", b =>
                {
                    b.HasOne("Facebook.Models.User", "OtherUser")
                        .WithMany("Messages")
                        .HasForeignKey("OtherUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Facebook.Models.Post", b =>
                {
                    b.HasOne("Facebook.Models.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Facebook.Models.ShortCut", b =>
                {
                    b.HasOne("Facebook.Models.User")
                        .WithMany("ShortCuts")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Facebook.Models.User", b =>
                {
                    b.HasOne("Facebook.Models.Image", "BackgroundPhoto")
                        .WithMany()
                        .HasForeignKey("BackgroundPhotoImageId");

                    b.HasOne("Facebook.Models.Image", "ProfilePhoto")
                        .WithMany()
                        .HasForeignKey("ProfilePhotoImageId");

                    b.HasOne("Facebook.Models.User")
                        .WithMany("Friends")
                        .HasForeignKey("UserId1");
                });
#pragma warning restore 612, 618
        }
    }
}
